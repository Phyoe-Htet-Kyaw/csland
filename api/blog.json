[
    {
        "id": 1,
        "title": "If you want to be a professional web developer",
        "category_id": 1,
        "photo": "images/1.jpg",
        "description": "ခေါင်းစဉ်လေး အတိုင်းပါပဲ။ အကယ်၍ သင်ဟာ professional web developer တစ်ယောက်ဖြစ်ချင်တယ်ဆိုရင်ပေါ့။ ဘာတွေလေ့လာရမလဲ။ ဘယ်လိုလျှောက်လှမ်းရမလဲ ဆိုတာကို ကျွန်တော့်ရဲ့ အတွေ့အကြုံနဲ့ ယှဉ်ပြီးပြောပြသွားမှာပါ။ ပထမဆုံးအနေနဲ့ ဘာတွေလေ့လာရမလဲ။ ဘာတွေလေ့လာရမလဲ ဆိုတာ မပြောခင် Web development ပိုင်းမှာ frontend နဲ့ backend နှစ်ပိုင်းရှိတယ်ဆိုတာ အရင်ပြောပါရစေ။ frontend ဆိုတာ UI (User Interface)/ UX (User Experience) အပိုင်းပါ။ အဓိက အားဖြင့် user တစ်ယောက် မျက်စိနဲ့ မြင်ရမဲ့ design ကို ဖန်တီးရေးဆွဲရတဲ့အပိုင်းပေါ့။ Web Design အပိုင်းလို့လဲ နားလည်ထားလို့ရပါတယ်။ ဒီ Web Design အပိုင်းမှာ ဘာတွေလေ့လာရမလဲဆို Basic နဲ့ Advanced Level နှစ်မျိုး ခွဲပြောပါ့မယ်။ Basic မှာဆို HTML, CSS, Bootstrap, Javascript, JQuery ဒီငါးခုပါ။ skill ကြမ်းနေပြီဆိုရင် ဒီ basic ငါးခုနဲ့တင် Frontend လောကမှာ ဘာဆိုလား လုပ်လို့ရပါတယ်။ တစ်ခုစီရဲ့အကြောင်းကို နောက်ထပ် posts တွေမှာ ထပ်ရှင်းပါမယ်။ ဒီ ငါးခုပြီးရင် Backend ပိုင်းကို ဆက်ပြီး ခြေဆန့်ရမှာပါ။ Frontend Advanced Level မှာ ဘာတွေလေ့လာရမလဲဆိုတော့ SPA (Single Page Application) တွေရေးဖို့အတွက် VueJs, ReactJs, AngularJs ဒါတွေ လက်ကိုင်ထားရပါမယ်။ သုံးခုလုံးမလေ့လာနိုင်ရင်တောင် တစ်ခုလောက်ကတော့ လက်စွဲထားရပါမယ်။ ဒီသုံးခုမှာတောင် next level တွေရှိပါသေးတယ်။ ဒါတွေကိုလဲ နောက်မှပြောပါမယ်။ အဓိက ဒီသုံးခုက Website တစ်ခုကို reload မဖြစ်စေပဲ data binding နဲ့ rendering လုပ်သွားတာပါ။ ဥပမာ facebook ကိုကြည့်ပါ။ ReactJs နဲ့ရေးထားတာပါ။ page reload မရှိဘူး။ မြန်ဆန်တယ်။ Design Rendering ကို လိုသလို စီမံလို့ရတယ်။ ဒါရဲ့ next level တွေဆိုတာက state management တွေ ဘာညာပေါ့။ ဟုတ်ပြီ။ ဒီလိုဆို Backend ပိုင်း ဆက်သွားရအောင်။ ဒီဘက်က နဲနဲပိုကျယ်ပြန့်တယ်ဗျ။ အရင်ဆုံး PHP ကို ဂျွတ်နေအောင် လေ့လာရမယ်။ Procedural (Pure PHP), OOP, MVC အကုန်သိနေရမယ်။ ဒါတွေမပိုင်ပဲ ရှေ့မဆက်စေချင်ဘူး။ ပြီးတော့ MySQL, AJAX, JSON (API)တွေကိုဆက်လေ့လာရမှာပါ။ ပိုင်ပြီဆိုရင်တော့ Laravel ကိုသွားစေချင်တယ်။ Laravel က အခုချိန်မှာ version 8 အထိရောက်နေပြီး PHP God Framework အဖြစ် နေမဝင် အင်ပါယာကို သူနယ်ချဲ့နေတာပါ။ တော်ရုံ ERP solution လောက်ကို laravel နဲ့ကောင်းကောင်းကြီး ကျုံးလို့ရပါတယ်။ livewire ဆိုရင်လဲ VueJs, ReactJs, AngularJs တို့လို SPA ပုံစံပါ။ ဒီ့အပြင် သူ့မှာ နောက်ထပ် package တွေ အများကြီးပါ။ MVC Framework ဖြစ်တဲ့အတွက် ရေးရတာလဲ ခြေမြန်လက်မြန် အတော်ရှိပါတယ်။ တော်တော် အရာရောက်တဲ့ PHP framework ပါ။ ဒီအထိရနေရင်တော့ Professional Web Developer အဖြစ် ကောင်းကောင်း လှုပ်ရှားလို့ရနေပါပြီ။ ဆက်ပြီး လေ့လာချင်ရင်တော့ MEAN Stack (MongoDB, ExpressJs, AngularJs, NodeJs), MERN Stack (MongoDB, ExpressJs, ReactJs, NodeJs) နဲ့ Hybrid Mobile Application Development (VueNative, React Native, Flutter, Ionic) ဘာညာ အများကြီး ဆက်လေ့လာနိုင်ပါတယ်။ ဒီလောက်ဆိုရင်တော့ တော်တော် အဆင်ပြေနေပါပြီ။ ကျန်တာကတော့ ကိုယ့်ရဲ့ လေ့လာအားထုတ်မှု၊ ကြိုးစားမှုနဲ့ skill အပေါ်ပဲ မူတည်ပါတယ်။ "
    },
    {
        "id": 2,
        "title": "Emperor of JavaScript",
        "category_id": 1,
        "photo": "images/2.jpg",
        "description": "Web Development ကို လေ့လာနေတဲ့ မိတ်ဆွေတို့ ဒါမှမဟုတ် Web Developer အဖြစ် လုပ်ကိုင်နေတဲ့ မိတ်ဆွေတို့ JavaScript ဆိုတဲ့ နာမည်ကိုတော့ စိမ်းမယ် မထင်ပါဘူး။ 1995 ခုနှစ်က စတင်တည်ထောင်ခဲ့တဲ့ JavaScript နိုင်ငံတော်ကြီးဟာ NodeJs နန်းတက်လာတဲ့နောက်ပိုင်းမှာ Emperor ကြီးအဖြစ် နယ်ချဲ့ကြီးစိုး အင်အားကြီးလာနေပါပြီ။ NodeJs နန်းမတက်ခင် Vanilla JavaScript လက်ထက်ကတော့ လူတစ်ကာ အနှိမ်ခံ ဘဝနဲ့ Browser ထဲမှာသာကျင်လည်ခဲ့တာပါ။ သူ့ရဲ့ အစွမ်းအစဟာ DOM လုပ်ပိုင်ခွင့်နဲ့ JSlibrary အချို့ကိုသာ ကိုင်တွယ်နိုင်ခဲ့တာ ဖြစ်ပြီး အပြည်ပြည်ဆိုင်ရာ Programming Language နဲ့ Platform အဖွဲ့အစည်းမှာ ဘောင်မဝင် တန်းမဝင် မျက်နှာငယ်ခဲ့ရတာပါ။ ဒါပေမဲ့ 2009 ခုနှစ်မှာ NPM စစ်တပ်နဲ့အတူ နန်းတက်လာခဲ့တဲ့ NodeJs ကတော့ Chrome ရဲ့ V8 engine အကူအညီကိုယူ C++ Programming Language နဲ့ နားလည်မှု MOU ရေးထိုးပြီး platform အနှံ့ နယ်ချဲ့သိမ်းလာတာ ခုဆို Machine Learning ဘက်ကလွဲ ကျန်တာ ကုန်သလောက်ဖြစ်နေပါပြီ။ ရေးလိုက်တဲ့ JavaScript code ကို Chrome V8 engine သုံးပြီး C++ code ပြောင်း၊ C++ compiler နဲ့ run ပြီး လုပ်ချင်တာ လုပ်ခွင့်ရလာတဲ့ NodeJs တစ်ယောက် စပြီး နယ်ချဲ့တာ Server (Backend) ပိုင်းကိုပါပဲ။ ထီးနန်းစည်းစိမ်နဲ့ ယစ်မူးသာယာနေတဲ့ PHP လိုမင်းမျိုးကို Request စောင့်စရာမလိုတဲ့ Server Response လို အကွက်နဲ့အတူ ပေါ့ပါး လျှင်မြန်မှု၊ MVC application pattern ရှိမှု၊ NPM စစ်တပ်ကြီးရဲ့ အားကြီးမှု၊ Security အားသာမှုနဲ့ အခြားသော နည်းပညာ အသစ်အဆန်းတွေနဲ့အတူ အနိုင်ယူပြပါတယ်။ Server (Backend) အပိုင်းကို အပိုင်သိမ်းပြီးတဲ့အခါ PHP မင်းကြီးဟာ ဟက်ကော့ကြီး ကျန်ခဲ့ပြီး သူ့ထီးနန်းကို ပြန်ရဖို့အတွက် Laravel စစ်တပ်ကို တည်ဆောက်ကာ PHP version (8) Beta နဲ့အတူ ပြန်လာနေပါပြီ။ ဒါဟာ JavaScript မင်းနေပြည်ရဲ့ ပထမကျူးကျော်စစ်ပါ။ ပြီးတဲ့အခါ MPA (Multi-Page Application) စနစ်တောက်လျှောက်ကျင့်သုံးလာတဲ့ Web Development ကမ္ဘာမှာ သူ့တိုင်းပြည်အတွက် သူကိုယ်တိုင် စနစ်တစ်ခုကို တပ်မကြီး လေးခုခွဲပြီး တည်ဆောက်ပါတယ်။ SPA (Single-Page Application) လို့ခေါ်တဲ့ စနစ်ကို Ember တပ်၊ Google ရဲ့ Angular တပ်၊ Facebook ရဲ့ React တပ်နဲ့ တရုတ်စစ်သူကြီး Evan You ဦးဆောင်တဲ့ Vue တပ်တို့နဲ့အတူ စတင်တည်ဆောက်ပါတယ်။ Frontend နယ်ပယ်မှာ ကျင်လည်နေတဲ့ Web Development ကမ္ဘာသူ ကမ္ဘာသားတွေအဖို့ လျှင်မြန်သွက်လက်လှတဲ့ ဒီ SPA စနစ်ဟာ သွားရည်ကျစရာဖြစ်လာပါတယ်။ Two-Databinding, State Management, Event Handling, Component Composition တို့နဲ့အတူ Page Reload မဖြစ်တဲ့ အရသာဟာ JavaScript တိုင်းပြည်ရဲ့ အဖိုးတန်ဆုံး ထုန်ကုန်ပါပဲ။ ဒီနည်းနဲ့ SPA နယ်ကို ကိုယ်တိုင်ထူထောင်ပြီး ထပ်နယ်ချဲ့ပါတယ်။ ဒီလိုနဲ့ မပြီးသေးပါဘူး။ အာသာမပြေလှတဲ့ NPM စစ်တပ်ကြီးကို ဦးဆောင်ထားတဲ့ NodeJs ဘုရင်ဟာ JavaScript ကို ပိုမိုအင်အားကြီးအောင် upgrade မြှင့်ပါတယ်။ Facebook အပိုင် React တပ်မကြီးရဲ့ JSX နည်းပညာနဲ့ ECMAscripts တို့ကို အသုံးပြုပြီး JavaScript တိုင်းပြည်ကြီး ယခင်ထက်ပိုတိုးတက်အောင် ဆောင်ရွက်ပါတယ်။ ECMAscripts ဆို JavaScript ကြီး စတည်ထောင်ထဲက နည်းပညာဆိုပေမဲ့လို့ 2015 ခုနှစ် ES5 ကစ နှစ်စဉ် နှစ်စဉ် Upgrade မြှင့်လာရင်း သူတို့ရဲ့ တိုင်းပြည်ကြီးကို ပိုမို တိုးတက်အောင်ဆောင်ရွက်လာပါတယ်။ ဒီ့အပြင် သူတို့က အငြိမ်မနေပဲ Facebook ရဲ့ React တပ်မ ကို အသုံးပြုပြီး Mobile Application Development ဘက်ကို နယ်စချဲ့ပါတယ်။ ပိုမိုအားကောင်းတဲ့ နည်းနဲ့ကို နယ်ချဲ့တာပါ။ Mobile Development မှာ Android နဲ့ IOS ဆိုပြီး နှစ်နိုင်ငံ တင်းမာမှုကို ကြားကနေ ချစ်ကြည်ရေးဝင်ပေးပြီး Hybrid ဆိုတဲ့ နည်းပညာနဲ့ ချုပ်လိုက်ပါတယ်။ ဒါကို React ရဲ့ တပည့် React Native ဆိုတဲ့ တပ်နဲ့အတူ Ionic, Monaca, Vue Native အစရှိတဲ့ တပ်တွေနဲ့ ဝင်တိုက်ပါတယ်။ ဒီတော့ ခဲတစ်လုံးနဲ့ ငှက်နှစ်ကောင်ပစ်သလို Android နဲ့ IOS သီးခြားနှစ်နိုင်ငံကို JavaScript က သိမ်းပိုက်လိုက်ပါတယ်။ PWA (Progressive Web App) ဆိုတဲ့ Standalone web page နည်းပညာကိုလဲ Google ရဲ့ အကူအညီနဲ့အတူ Android ကော IOS ကော နှစ်နိုင်ငံလုံးကို ဆွဲချုပ်ထားပါတယ်။ ဒီလိုနဲ့ Android Development ကလဲ JavaScript ရဲ့ လက်အောက်ခံဖြစ်သွားပါတယ်။ ဒါက JavaScript တို့ရဲ့ ဒုတိယကျူးကျော်စစ်ပါ။ နောက်ဆုံးမှာ JavaScript တို့ ဘယ်လောက်ထိရဲတင်းပြီး အင်အားကြီးလာလဲဆိုရင် Programming Language အဖွဲ့အစည်းရဲ့ အင်အားကြီး နိုင်ငံတွေဖြစ်တဲ့ C++, Java, C#, Python တို့ရဲ့ နယ်မြေအတွင်းရှိတဲ့ Window Form Application အပိုင်းထိပါ ကျူးကျော်ရန်စ လာပါတယ်။ ElectronJs လို့ခေါ်တဲ့ စစ်တပ်နဲ့အတူ စစ်ခင်းတိုက်ယူတာပါ။ တစ်ဆက်ထဲမှာပဲ Game Development 2D 3D ဘက်ကိုလဲ BabylonJs, PixiJs စစ်တပ်ကိုဦးဆောင်ကာ နယ်ချဲ့နေပါတယ်။ ဒါတွေဟာလဲ JavaScript တိုင်းပြည်ရဲ့ တတိယကျူးကျော်စစ်နဲ့ စတုတ္ထကျူးကျော်စစ်ပါ။ ကျူးကျော်စစ်များဆက်တိုက်ဆိုသလို ဆင်နွှဲနေစဉ်အတွင်းမှာပဲ NodeJs ဘုရင်ကြီးဟာ သူ့သားနှစ်ယောက်ကို သူမရှိတော့တဲ့အချိန် JavaScript တိုင်းပြည်ကြီးကို ဒီ့ထက်ပိုကြမ်းအောင် ဆောင်ရွက်နိုင်ဖို့ အိမ်ရှေ့စံရာထူးပေးခဲ့ပါတယ်။ ဒီသားနှစ်ယောက်ကတော့ အဖေ့ရဲ့ ပြုစုသင်ကြားပေးမှုတွေနဲ့ ကြီးပြင်းလာတဲ့ သားကြီး AdonisJs နဲ့ အဖေကို တနေ့ကျ အနိုင်ယူပြမယ်ဆိုပြီး အမြဲကြုံးဝါးနေတဲ့ သားငယ် denoJs ပါပဲ။ ဒီသားနှစ်ယောက် ကျန်ရှိနေတဲ့ Machine Learning နယ်မြေကို ဆက်လက်ကြီးစိုးနိုင်မလားဆိုတာ စောင့်ကြည့်ရမှာပါ။ လောလောဆယ် အဲ့နယ်မြေရဲ့ ရေမြေ့သခင် ပြည့်ရှင်မင်းကတော့ Python မင်းတရားကြီးပါပဲ။ ဆိုတော့ခါ NodeJs ဦးဆောင်တဲ့ NPM စစ်တပ်နဲ့ JavaScript တိုင်းပြည်ကြီးဟာ နေမဝင်ပါယာကြီးကို တည်ထောင်ရင်း သူအမြဲ မိန့်တဲ့ မိန့်ခွန်းတစ်ခုရှိပါတယ်။ အဲ့တာကတော့ 'Everything is JavaScript'."
    },
    {
        "id": 3,
        "title": "Object Oriented Programming (OOP)",
        "category_id": 3,
        "photo": "images/3.jpg",
        "description": "<div><font color='#ce9178'>ဘယ် Programming Language ပဲ လေ့လာ လေ့လာ Procedural အဆင့်ပြီးရင် OOP level ကို တက်လှမ်းရ စမြဲပါပဲ။ OOP မသိရင် အကြီးကြီးတွေ ရေးဖို့ အဆင်မပြေလှပါဘူး။ အဲ့တော့ OOP အကြောင်း ကျွန်တော် သိသလောက်ရှင်းပြပါမယ်။</font></div><div><font color='#ce9178'><br></font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; OOP ဆိုတာ Object-Oriented Programming လို့ခေါ်တဲ့ Programming paradim တစ်မျိုးပါ။ Object တွေကို အခြေခံပြီး ရေးသွားတဲ့ paradim ရေးဟန် တစ်မျိုးပါ။&nbsp;</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Class တွေ ခွဲပြီး ရေးမယ် ပြန်ချိတ်မယ်။ အဲ့ Class တွေကို Object အဖြစ် ပြန်ခေါ်ပြီး သုံးမယ်။ ဒါမျိုးပါ။ တကယ်တော့ ဒီ့ထက် deep ဖြစ်ပါတယ်။ ဒါက နားလည်လွယ်အောင်ပြောပြတာပါ။&nbsp;</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Principles of OOP</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; OOP လို့ ပြောလိုက်တာနဲ့ OOP ရဲ့ ဒီ အခြေခံ Principles တွေကို သိထားရပါမယ်။ ဒါတွေကတော့</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Object</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Object ရဲ့ အဓိပ္ပါယ်က ဘာလဲဆိုရင် အရာဝတ္ထုတိုင်းဟာ Object ပါ။ ဒီတော့ နားမရှုပ်အောင် Programming ကို ဖယ်ပြီး ပြောပါရစေ။ ကျွန်တော်တို့ လက်တွေ့မှာ မြင်နေရတဲ့ အရာဝတ္ထုတွေ အားလုံးဟာ Object ပါ။ ခဲတံ၊ ပေတံ၊ ဘောပင်၊ စာအုပ်၊ ကား၊ လှေ၊ အိမ်၊ လူ ဒါတွေ အားလုံးဟာ&nbsp; Object ပါ။ အဲ့တော့ programming နဲ့ ပြန်ယှဉ်ရင် Programming မှာ ဘယ်အရာတွေကို Object လို့ခေါ်မလဲ? အရာဝတ္ထုတိုင်းကို object လို့ ခေါ်တဲ့အတွက် variable ဟာ object ပါ။ datatype တွေဟာလဲ object ပါ။ method ဟာလဲ object ပါ။ သေးသေးကြီးကြီး အရာအားလုံးဟာ object ပါ။</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Class</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; အဲ့တော့ အရာဝတ္ထုတိုင်းဟာ Object ဆိုတာကို နားလည်ရင် အဲ့ object တွေကို စုထားတဲ့ အရာကို class လို့ ခေါ်ပါတယ်။</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; programming ကိုဖယ်ပြီး လက်တွေ့နဲ့ပြောရရင် ခဲတံတွေကို စုထားတဲ့ ကွန်ပါဘူးဆိုရင် ခဲတံဟာ object ဖြစ်ပြီး ကွန်ပါဘူးဟာ Class ဖြစ်ပါမယ်။ ဒီလိုပါပဲ ကားတွေကို စုထားတဲံ ကားပါကင်ဆိုရင် ကားတွေဟာ object ဖြစ်ပြီး ကားပါကင်ဟာ class ဖြစ်ပါမယ်။ ဒီတော့ Programming နဲ့ ပြန်ပြောရရင် Variable တွေ Algorithm တွေ data structure တွေကို စုထားတာ method ဆိုရင် Variable, Algorithm, DataType, DataStructure ဘာညာ အားလုံးဟာ object ဖြစ်ပြီး method ဟာ class ဖြစ်ပါမယ်။ ဒီတော့ method တွေဟာ class ဖြစ်တဲ့ဆိုရင် method တွေကို စုထားတဲ့ file ကို class လို့ခေါ်ပါတယ်။&nbsp;</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Inheritance</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Inheritance က ဘာလဲဆိုတော့ နားလည်အောင်ပြောရရင် လှမ်းချိတ်တာပေါ့။ လက်တွေ့နဲ့ပြောရရင် မိဘနဲ့ သားသမီး ဆက်ဆံရေးလိုမျိုးပေါ့။ သားသမီးကို မိဘက မွေးထုတ်ထားတဲ့အတွက် မိဘဆီကနေ လိုချင်တာတောင်းလို့ရသလိုမျိုး​ပေါ့။ သားသမီးက မိဘကို inheritance လှမ်းလုပ်ထားတဲ့အတွက် ဘာလိုလို မိဘဆီက အဆင်သင့် လက်ဖြန့်တောင်းရုံပဲ။ (ဥပမာနော် ဥပမာ) အဲ့တော့ programming နဲ့ပြန်ပြောရရင် Class B က Class A ကို inheritance လှမ်းလုပ်မယ်ဆိုပါဆို့။ ဒါဆို Class A က Parent Class ဖြစ်ပြီး Class B က Child Class ဖြစ်သွားမယ်။ အဲ့တော့ Child Class (Class B) က Parent Class (Class A) ထဲကရှိသမျှ objects တွေ (Methods and Variables) တွေအကုန်လုံးကို ခေါ်သုံးလို့ရသွားမယ်။ ဒါ inheritance ရဲ့ သဘောတရားပါ။ inheritance လုပ်တော့မယ်ဆို သူ့ရဲ့ keyword (extends) ဆိုတာကို သုံးရမှာပါ။</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Polymorphism</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Polymorphism ဆိုတာ ဘာလဲဆိုရင် အလုပ်တစ်ခုကို မတူညီတဲ့ နည်းလမ်းတွေနဲ့ အလုပ်လုပ်တာကိုပြောတာပါ။ လက်တွေ့နဲ့ယှဉ်ပြီးပြောရရင်တော့ လူတစ်ယောက်က အိမ်မွေးတိရစ္ဆာန် သုံးကောင် မွေးထားတယ်။ ခွေးရယ် ကြောင်ရယ် ဘဲရယ်ပေါ့။ အဲ့တော့ အဲ့လူက သူ့အိမ်မွေး တိရစ္ဆာန်တွေကို စကားပြောစမ်းဆိုတဲ့ task တခုပေးလိုက်မယ်ဆိုပါဆို့။ အဲ့တော့ ခွေးက ဝုတ်ဝုတ်ဆိုပြီးပြောမယ် ကြောင်က ညောင်ညောင် ဆိုပြီးပြောမယ်။ ဘဲက ဂတ်ဂတ် ဆိုပြီးပြောမယ်။ တိရစ္ဆာန်သုံးကောင်က ပြောတဲ့ အသံမတူပေမဲ့ စကားပြောတဲ့ Task ကို အောင်မြင်စွာလုပ်ဆောင်နိုင်တယ်။ ဆိုလိုချင်တာက အလုပ်တစ်ခု လုပ်ခိုင်းလိုက်မယ် အဲ့အလုပ်ကို သင့်လျှော်တဲ့ နည်းလမ်းပေါင်းစုံနဲ့ အလုပ်လုပ်သွားတယ်ပေါ့။ programming နဲ့ယှဉ်ပြီးပြောရရင် polymorphism ကို သုံးပြီးရေးမယ်ဆိုရင် method overloading နဲ့ method overriding ကို သုံးရတယ်။ အဲ့နှစ်ခုရဲ့ သဘောတရားက method name အတူတူပေးထားတယ်။ တောင်းဆိုတဲ့ parameter အရေအတွက် or parameter datatype အမျိုးအစား ကွဲသွားတယ်။ ဥပမာ function A ဆိုတဲ့ method နှစ်ခုရှိမယ်။ ပထမ function A method က parameter နှစ်ခုတောင်းမယ်။ ဒုတိယ function B က parameter သုံးခုတောင်းမယ်ဆိုပါစို့။ အဲ့တော့ object လှမ်းခေါ်ပြီး function A ကို run တော့မယ်ဆိုရင် parameter ထည့်ပေးရတော့မယ်။ ထည့်လိုက်တဲ့ parameter က နှစ်ခုဆိုရင် ပထမ function A method ကို အလုပ်လုပ်ပြီး ထည့်လိုက်တဲ့ parameter သုံးခုဆို ဒုတိယ function B method ကို သွားအလုပ်လုပ်ပါတယ်။ ဒါက polymorphism ပါ။</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Abstraction</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Abstraction ကတော့ method တွေကို လျှိ့ဝှက်ရေးပြီး ပြန်သုံးတယ်လို့ မှတ်ယူရင် ရပါတယ်။ ဥပမာအနေနဲ့ လက်တွေ့မှာဆိုရင် ကျွန်တော်တို့ ဖုန်းပြောတယ်။ ဖုန်းပြောဖို့အတွက် ဖုန်းခေါ်တဲ့သူက outcome call က operator ဆီသွားမယ် အဲ့ကတဆင့် ဖုန်းလက်ခံသူဆီ income call ဝင်မယ်။ ကျွန်တော်တို့ ဒီလောက်ပဲ သိထားတာပါ။ သူ့ procedure ကို။ တကယ်က အဲ့ထက်ပိုရှုပ်ထွေးပါတယ်။ အဲ့ရှုပ်ထွေးတဲ့ procedure ကိုလဲ operator က network သမားတွေကလွဲရင် ဘယ်သူမှ ပိုမသိနိုင်ပါဘူး။ ဒီသဘောပါပဲ။ abstraction ကိုသုံးမယ်ဆိုရင် သူ့ရဲ့ keyword ဖြစ်တဲ့ abstract ဆိုတဲ့ keyword ကို class ရဲ့ ရှေ့မှာ ရေးပါတယ်။ (ဥပမာ abstract class A) အဲ့တော့သူ့ကို extends လှမ်းလုပ်တဲ့ class ကနေ method တွေရေးပြီး သူကနေ abstract keyword နဲ့ထိုင်ခေါ်နေရင် method တွေက ဘယ်က အလုပ်လုပ်လို့ လုပ်မှန်းမသိ ဖြစ်သွားပါတယ်။ ဒါက abstraction ပါ။</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Encapsulation</font></div><div><font color='#ce9178'>&nbsp; &nbsp; &nbsp; &nbsp; Encapaulation ဆိုတာ ဘာလဲ အရင်မပြောခင် Capsule ဆိုတာ ဘာလဲ အရင်ပြောပါမယ်။ Capsule ရဲ့ အဓိပ္ပါယ်က ဆေးတောင့်ပါ။ ကျွန်တော်တို့နေမကောင်းရင် သောက်နေကျ ဆေးတောင့်လေးတွေကိုပြောတာပါ။ အဲ့ဆေးတောင့်လေးတွေဟာ ဆေးအမှုန့်လေးတွေကို စုထားတာပါ။ အဲ့တော့ အဲ့ဆေးကို သောက်ရင် capsule က အလုပ်မလုပ်ပဲ အဲ့ capsule ထဲက ဆေးမှုန်တွေက အလုပ်လုပ်သွားတာပါ။ ဒီသဘောပါပဲ။ programming မှာ method တွေ အားလုံးကို စုပြီးရေးထားတဲ့ file ကို class လို့ခေါ်ကြောင်းပြောခဲ့ပါတယ်။ အဲ့လို စုပြီးတခုထဲ ရေးထားတာ (Binding) လုပ်ထားတာကို encapsulation လို့ခေါ်ပါတယ်။</font></div>"
    }
]